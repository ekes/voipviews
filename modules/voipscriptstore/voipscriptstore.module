<?php
/**
 * @file
 *  A store for building, and listing, voipscripts.
 */

/**
 * voipScriptStore class.
 */
class voipScriptStore extends ArrayObject {
  /**
   * Script name
   */
  public $name;

  /**
   * Script variables
   */
  public $variables;

  /**
   * getters setters
   */
  function getName() { return $this->name; }
  function getVariables() { return $this->variables; }
  function getVariable($name) { return (isset($this->variables['name'])) ? $this->variables['name'] : NULL; } // or throw a warning?
  function setName($name) { $this->name = $name; }
  function setVariable($name, $value) { $this->variables[$name] = $value; }

  /**
   * VoipScript constructor.
   */
  public function __construct($values = array()) {
    $this->name = (! empty($values['name'])) ? $values['name'] : 'voipscriptstore_run';
    $this->variables = (! empty($values['variables'])) ? $values['variables'] : array();
    parent::__construct((! empty($values['commands'])) ? $values['commands'] : array());
  }

  /**
   * Overloading: uses voipScriptStore::$storable to select valid methods.
   *
   * Could add further argument checking
   */
  public function __call($name, $arguments) {
    if (in_array($name, self::$storable)) {
      $this->offsetSet(NULL, array($name, $arguments));
      return true;
    }
    throw new BadMethodCallException("Method $name is not implemented");
  }

  public function __toString() {
    // note this is still not safe for saving as a script variable,
    // as voipScript interprets all the '%..' immediately.
    return json_encode($this->getArrayCopy());
  }

  public function getArrayCopy() {
    $copy = array();
    $copy['name'] = $this->name;
    $copy['variables'] = $this->variables;
    $copy['voipScriptStore'] = parent::getArrayCopy();
    return $copy;
  }

  function appendScript(voipScriptStore $script) {
    if (! is_object($script)) {
      return;
    }
    foreach ($script as $line) {
      $this->offsetSet(NULL, $line);
    }
    foreach ($script->getVariables() as $variable => $value) {
      if (! isset($this->$variable)) {
        $this->$variable = $value;
      }
    }
  }

  /**
   * Emulating the action of the VoipScript so only store a string.
   */
  public function addSet($var_name, $var_value) {
    $this->offsetSet(NULL, array('addSet', array($var_name, (string) $var_value)));
    return true;
  }

  /**
   * 'Implemented methods' from VoipScript to store.
   */
  public static $storable = array(
    'setVar',
    'unsetVar',
    'setLanguage',
    'getLanguage',
    'setVoice',
    'getVoice',
    /**
     * Methods used during script execution =
     * Not sure they are any use here, should not support
     */
    'getNextCommand',
    'resetIndex',
    'evalString',
    'isError',
    'getErrorMessage',
    /*
     * Supported script commands
     */
    'addBeep',
    'addDial',
    'addGetInput',
    'addGosub',
    'addGoto',
    'addGotoIf',
    'addHangup',
    'addJoinConference',
    'addLabel',
    'addLog',
    'addRunIvrMenu',
    'addRecord',
    'addReject',
    'addReturn',
    'addSay',
    'addSendText',
    'addSet',
    'addSetLanguage',
    'addSetVoice',
    'addUnset',
  );
}

/**
 * Implementation of hook_voipscript_get_script_names() {
 */
function voipscriptstore_voipscript_get_script_names() {
  return array('voipscriptstore_run');
}

/**
 * Implementation of hook_voipscript_load_script()
 *
 * @todo Make this a factory of the class why not.
 */
function voipscriptstore_voipscript_load_script($script_name, $params) {
  if ($script_name == 'voipscriptstore_run') {
    $script = FALSE;
  
    // if the script store object has been passed around it can be passed into
    // the function as json
    if (is_string($params['script'])) {
      $params['script'] = json_decode($params['script'], true);
    }
    if (is_array($params['script'])) {
      $params['script'] = new voipScriptStore($params['script']);
    }

    // if we have a valid script store make a VoipScript
    if ($params['script'] instanceof voipScriptStore) {
      $script_store = $params['script'];
      $script = new VoipScript($script_store->getName(), $script_store->getVariables());
      foreach ($script_store as $line) {
        list($command, $params) = $line;
        call_user_func_array(array($script, $command), $params);
      }
    }

    if (! $script) {
      $script = new VoipScript('voipscriptstore_error');
      $script->addSay('Error running script.');
      $script->addLog('voipscriptstore_error called', $params);
      watchdog('DEBUG', var_export($params,true));
      $script->addReturn();
    }

    return $script;
  }
}
